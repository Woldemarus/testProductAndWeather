buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'ru.alfalab.gradle:cucumber-reporting-gradle-plugin:0.1.0'
        classpath 'ru.alfalab.gradle:cucumber-parallel-test-gradle-plugin:0.3.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath "io.qameta.allure:allure-gradle:2.3"
        classpath "io.qameta.allure:allure-cucumber4-jvm:2.19.0"
    }
}

plugins {
    id 'io.qameta.allure' version '2.8.1'
}

allure {
    autoconfigure = true
    version = '2.1.1'  // Latest Allure Version

    useJUnit5 {
        version = '2.8.1' // Latest Allure Version
    }

    aspectjweaver = true
}

repositories {
    maven {
        url "https://dl.bintray.com/alfa-laboratory/maven-releases/"
    }
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'ru.alfalab.cucumber-reporting'
apply plugin: 'ru.alfalab.cucumber-parallel-test'
apply plugin: 'license'

description = """Template for your project (CHANGE ME)"""
generateRunner.glue = ["ru.alfabank.steps", "steps"]

if (project.hasProperty('projVersion')) {
    project.version = project.projVersion
} else {
    project.version = '1.0.0'
}

dependencies {
    compile 'ru.alfabank.tests:akita:4.0.0'
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.7.0'
    implementation 'io.qameta.allure:allure-rest-assured:2.19.0'
    testRuntimeOnly('io.qameta.allure:allure-junit5:2.14.0')
    testImplementation('io.qameta.allure:allure-selenide:2.14.0')
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

test {
    maxParallelForks = 10
    ignoreFailures = true
    jvmArgs += "-Dprofile=${profile}"
    jvmArgs += "-Dselenide.pageLoadStrategy=none"

    //путь к классу с кастомными настройками драйвера.
    jvmArgs += "-Dselenide.browser=ru.alfabank.tests.core.drivers.CustomDriverProvider"

    //параметры galen framework для возможности скролла страницы и снятния полного скриншота страницы
    jvmArgs += "-Dgalen.browser.screenshots.fullPage=true"
    jvmArgs += "-Dgalen.browser.screenshots.fullPage.scrollWait=50"
    jvmArgs +=  "-Dcucumber.options=\"--plugin io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm\""

    if (tag) {
        jvmArgs += "-Dcucumber.options=--tags ${tag}" //параметр для запуска тестов с использование тэгов
    }
    if (browser) {
        jvmArgs += "-Dbrowser=${browser}"
    }
    if (remoteUrl) {
        jvmArgs += "-DremoteUrl=${remoteUrl}" //url для удаленного зауска тестов
    }
    if (browserVersion) {
        jvmArgs += "-DbrowserVersion=${browserVersion}"
    }
    if (height) {
        jvmArgs += "-Dheight=${height}" //высота окна браузера
    }
    if (width) {
        jvmArgs += "-Dwidth=${width}" //ширина окна браузера
    }
    if (maximized) {
        jvmArgs += "-Dselenide.startMaximized=${maximized}"
    }
    if (width && height) {
        jvmArgs += "-Dselenide.browserSize=${width}x${height}"
    }

    reports {
        html.enabled = false
        junitXml.enabled = false
    }
}

task makeZip(type: Zip) {
    from('build/reports/cucumber') {
        into("${project.version}-testReport")
    }
}

license {
    header rootProject.file('HEADER')
    strictCheck true
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {     // This is for logging and can be removed.
        events("passed", "skipped", "failed")
    }
}
